{"version":3,"sources":["scb-logo.png","Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","props","state","minutes","seconds","input","Number","isRunning","undefined","handleSubmit","bind","handleChange","this","setState","countdown","event","target","value","myInterval","setInterval","clearTimeout","console","log","clearInterval","Fragment","className","id","class","src","logoScb","alt","placeholder","type","onChange","disabled","style","fontSize","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,sC,mPCEtBC,E,YACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,QAAS,EACTC,QAAS,GACTC,MAAOC,OACPC,eAAWC,GAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATN,E,4EAadE,KAAKC,SAAS,CACVV,QAASS,KAAKV,MAAMG,MACpBD,QAAS,EACTG,WAAW,IAEfK,KAAKE,c,mCAEIC,GACTH,KAAKC,SAAS,CACVR,MAAOU,EAAMC,OAAOC,U,kCAIhB,IAAD,OACPL,KAAKM,WAAaC,aAAY,WAAO,IAAD,EACH,EAAKjB,MAA1BE,EADwB,EACxBA,QAASD,EADe,EACfA,QAEF,IAAZA,GAA6B,IAAZC,IAChBgB,aAAa,EAAKF,YAClBG,QAAQC,IAAI,sDACZ,EAAKT,SAAS,CACVN,WAAW,IAEfc,QAAQC,IAAI,EAAKpB,MAAMK,YAEvBH,EAAU,IACViB,QAAQC,IAAI,cACZ,EAAKT,UAAS,kBAAkB,CAC5BT,QADU,EAAGA,QACM,OAGX,IAAZA,IACAiB,QAAQC,IAAI,eACI,IAAZnB,GACAkB,QAAQC,IAAI,gBACZC,cAAc,EAAKL,cAEnBG,QAAQC,IAAI,gBACZ,EAAKT,UAAS,kBAAkB,CAC5BV,QADU,EAAGA,QACM,EACnBC,QAAS,WAItB,O,+BAGG,IAAD,EACwBQ,KAAKV,MAA1BC,EADH,EACGA,QAASC,EADZ,EACYA,QACjB,OACG,kBAAC,IAAMoB,SAAP,KACC,6BACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,aACX,6BAASC,GAAG,SACR,yBAAKA,GAAG,iBACJ,yBAAKD,UAAU,kBACX,yBAAKA,UAAU,oCACf,yBAAKE,MAAM,uCAAX,mBACA,yBAAKF,UAAU,OAAOG,IAAMC,IAASC,IAAM,aAEvC,6BACA,6BACA,6BACA,yBAAKL,UAAU,aACX,yBAAKA,UAAU,cACX,2BAAOA,UAAU,WAAjB,QACA,2BAAOA,UAAU,2BAA2BM,YAAY,YAAYC,KAAK,SAASC,SAAUrB,KAAKD,gBAErG,4BAAQc,UAAU,kBAAkBS,UAAWtB,KAAKV,MAAMG,QAAgC,IAAvBO,KAAKV,MAAMK,UAC1E4B,MAAO,CAACC,SAAU,QAASJ,KAAK,SAChCK,QAASzB,KAAKH,cAFlB,YAQZ,6BACI,6BACA,yBAAKgB,UAAU,cACD,IAAZtB,GAA6B,IAAZC,EACb,0CACA,wCAAcD,EAAd,aAAiCC,EAAU,GAAV,WAAmBA,GAAYA,e,GAhGvEkC,aCUpBC,MARf,WACE,OACE,6BACE,kBAAE,EAAF,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f4e00950.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scb-logo.6b3059ef.png\";","import React, { Component } from 'react'\nimport logoScb from './scb-logo.png'\nexport default class Timer extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            minutes: 0,\n            seconds: \"\",\n            input: Number,\n            isRunning: undefined\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n    \n    handleSubmit(){\n        this.setState({\n            minutes: this.state.input,\n            seconds: 0,\n            isRunning: true\n        })\n        this.countdown()\n    }\n    handleChange(event){\n        this.setState({\n            input: event.target.value\n        })\n        \n    }\n    countdown(){\n        this.myInterval = setInterval(() => {\n            const { seconds, minutes } = this.state\n\n            if(minutes === 0 && seconds === 0){\n                clearTimeout(this.myInterval)\n                console.log(\"clearInterval แล้วนะ\")\n                this.setState({\n                    isRunning: false\n                })\n                console.log(this.state.isRunning)\n            }\n            if (seconds > 0) {\n                console.log(\"second > 0\")\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 0) {\n                console.log(\"second == 0\")\n                if (minutes === 0) {\n                    console.log(\"minutes == 0\")\n                    clearInterval(this.myInterval)\n                } else {\n                    console.log(\"minutes != 0\")\n                    this.setState(({ minutes }) => ({\n                        minutes: minutes - 1,\n                        seconds: 59\n                    }))\n                }\n            } \n        }, 1000)\n    }\n    \n    render() {\n        const { minutes, seconds } = this.state\n        return (\n           <React.Fragment>\n            <div>\n                <div className=\"vertical-center\"> \n                    <div className=\"container\">\n                        <section id=\"cover\">\n                            <div id=\"cover-caption\">\n                                <div className=\"row text-white\">\n                                    <div className=\"col-sm-6 offset-sm-3 text-center\">\n                                    <div class=\"corner-ribbon top-right sticky blue\">Digital Academy</div>\n                                    <img className=\"logo\" src= {logoScb} alt = \"scb logo\"  />\n                                        {/* <h1 className=\"display-4\">Timer App</h1> */}\n                                        <br></br>\n                                        <br></br>\n                                        <br></br>\n                                        <div className=\"info-form\">\n                                            <div className=\"form-group\">\n                                                <label className=\"sr-only\">Name</label>\n                                                <input className=\"form-control text-center\" placeholder=\"Minute...\" type=\"number\" onChange={this.handleChange} />\n                                            </div>\n                                            <button className=\"btn btn-success\" disabled={!this.state.input || this.state.isRunning===true} \n                                                style={{fontSize: \"13px\"}} type=\"submit\" \n                                                onClick={this.handleSubmit}>\n                                                START\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div>\n                                    <hr />\n                                    <div className=\"text-white\">\n                                    { minutes === 0 && seconds === 0\n                                        ? <h1>Time Out !</h1>\n                                        : <h1>Minute : {minutes} Second : {seconds < 10 ? `0${seconds}` : seconds}</h1>\n                                    }\n                                    </div>\n                                </div>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </div>\n           </React.Fragment>\n        )\n    }\n}","import React from 'react';\nimport './bootstrap.css';\nimport './App.css';\nimport Timer from './Timer'\nfunction App() {\n  return (\n    <div>\n      < Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}